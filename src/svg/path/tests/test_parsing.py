from __future__ import division
import unittest
from ..path import CubicBezier, QuadraticBezier, Line, Arc, Path
from ..parser import parse_path

class TestParser(unittest.TestCase):
    
    def test_svg_examples(self):
        """Examples from the SVG spec"""
        path1 = parse_path('M 100 100 L 300 100 L 200 300 z')
        self.assertEqual(path1, Path(Line(100+100j, 300+100j), 
                                     Line(300+100j, 200+300j),
                                     Line(200+300j, 100+100j)))
        
        path1 = parse_path('M 100 100 L 200 200')
        path2 = parse_path('M100 100L200 200')
        self.assertEqual(path1, path2)
                
        path1 = parse_path('M 100 200 L 200 100 L -100 -200')
        path2 = parse_path('M 100 200 L 200 100 -100 -200')
        self.assertEqual(path1, path2)
        
        
        path1 = parse_path("""M100,200 C100,100 250,100 250,200
                              S400,300 400,200""")
        self.assertEqual(path1, 
            Path(CubicBezier(100+200j, 100+100j, 250+100j, 250+200j),
                 CubicBezier(250+200j, 250+300j, 400+300j, 400+200j)))

        path1 = parse_path('M100,200 C100,100 400,100 400,200')
        self.assertEqual(path1, 
            Path(CubicBezier(100+200j, 100+100j, 400+100j, 400+200j)))

        path1 = parse_path('M100,500 C25,400 475,400 400,500')
        self.assertEqual(path1, 
            Path(CubicBezier(100+500j,  25+400j, 475+400j, 400+500j)))

        path1 = parse_path('M100,800 C175,700 325,700 400,800')
        self.assertEqual(path1, 
            Path(CubicBezier(100+800j, 175+700j, 325+700j, 400+800j)))

        path1 = parse_path('M600,200 C675,100 975,100 900,200')
        self.assertEqual(path1, 
            Path(CubicBezier(600+200j, 675+100j, 975+100j, 900+200j)))

        path1 = parse_path('M600,500 C600,350 900,650 900,500')
        self.assertEqual(path1, 
            Path(CubicBezier(600+500j, 600+350j, 900+650j, 900+500j)))

        path1 = parse_path("""M600,800 C625,700 725,700 750,800
                              S875,900 900,800""")
        self.assertEqual(path1, 
            Path(CubicBezier(600+800j, 625+700j, 725+700j, 750+800j),
                 CubicBezier(750+800j, 775+900j, 875+900j, 900+800j)))

        path1 = parse_path('M200,300 Q400,50 600,300 T1000,300')
        self.assertEqual(path1, 
            Path(QuadraticBezier(200+300j, 400+50j, 600+300j),
                 QuadraticBezier(600+300j, 800+550j, 1000+300j)))

        path1 = parse_path('M300,200 h-150 a150,150 0 1,0 150,-150 z')
        self.assertEqual(path1, 
            Path(Line(300+200j, 150+200j), 
                 Arc(150+200j, 150+150j, 0, 1, 0, 300+50j), 
                 Line(300+50j, 300+200j)))
        
        path1 = parse_path('M275,175 v-150 a150,150 0 0,0 -150,150 z')
        self.assertEqual(path1, 
            Path(Line(275+175j, 275+25j), 
                 Arc(275+25j, 150+150j, 0, 0, 0, 125+175j), 
                 Line(125+175j, 275+175j)))

        path1 = parse_path("""M600,350 l 50,-25 
                              a25,25 -30 0,1 50,-25 l 50,-25 
                              a25,50 -30 0,1 50,-25 l 50,-25 
                              a25,75 -30 0,1 50,-25 l 50,-25 
                              a25,100 -30 0,1 50,-25 l 50,-25""")
        self.assertEqual(path1, 
            Path(Line(600+350j, 650+325j),
                 Arc(650+325j, 25+25j, -30, 0, 1, 700+300j),
                 Line(700+300j, 750+275j),
                 Arc(750+275j, 25+50j, -30, 0, 1, 800+250j),
                 Line(800+250j, 850+225j),
                 Arc(850+225j, 25+75j, -30, 0, 1, 900+200j),
                 Line(900+200j, 950+175j),
                 Arc(950+175j, 25+100j, -30, 0, 1, 1000+150j),
                 Line(1000+150j, 1050+125j)))

        # Test case with exponential/scientific notation        
        pathe = parse_path("""m 833.71329,90.072292 c 1.58683,0.705744 3.03569,1.914441 4.76051,2.117234 4.35259,0.511748 8.78785,-0.457294 13.1477,-0.01171 4.85191,0.495877 9.51246,2.256697 14.35669,2.822722 6.72384,0.785649 13.5472,0.444993 20.27188,1.223459 6.61913,0.766248 13.05377,2.900959 19.69812,3.403571 8.40453,0.635758 16.8571,-5.16e-4 25.28564,-7.74E-4 6.09007,1.314102 12.21964,2.456922 18.27021,3.942312 14.28304,3.50644 13.75328,4.73728 27.90598,6.92569 7.99975,1.23699 16.20339,0.93313 24.16718,2.38362 2.5595,0.46618 4.9784,1.51312 7.4676,2.26969 2.2879,0.44121 4.5759,0.88242 6.8638,1.32364 3.1186,-0.27164 6.2737,-1.36295 9.3557,-0.81491 1.7832,0.31709 2.5533,3.04474 4.3525,3.25249 3.7271,0.43035 7.4148,-1.67864 11.1604,-1.46127 1.8135,0.10525 3.2642,1.5954 4.8963,2.3931 2.6778,-0.0979 5.3555,-0.19572 8.0333,-0.29359 6.4452,-1.24533 10.7372,-2.8288 17.1327,-1.73669 1.7664,0.30163 3.2688,2.14776 5.0394,1.87204 4.9414,-0.76946 9.2971,-3.84079 14.1917,-4.86663 4.8193,-1.01003 10.5158,0.68712 15.1498,1.69096 3.7073,-0.55901 7.4145,-1.11802 11.1218,-1.67702 3.3375,-0.31945 6.6937,-0.48244 10.0126,-0.95833 3.6546,-0.52403 7.2059,-2.32343 10.8869,-2.03844 1.4399,0.11148 1.5894,2.86515 3.0119,3.11453 2.672,0.46845 5.3497,-0.95034 8.0532,-1.17466 1.7076,-0.14169 3.4266,0.0533 5.1399,0.08 3.1548,4.53434 8.4096,-2.57919 11.939,-0.92018 0.9199,0.43238 -1.6136,2.20549 -0.8879,2.9171 0.2128,0.20861 6.1462,-0.72667 7.8041,-0.97199 0.4056,0.5745 0.5155,1.77591 1.2169,1.72351 0.2942,-0.022 11.3738,-4.67111 11.6466,-4.76114 1.2682,-0.4185 2.6695,-0.33969 3.929,-0.78358 4.1222,-1.45273 3.4953,-3.42566 3.9399,-1.31211 0,0 -32.3708,25.69867 -32.3708,25.69867 l 0,0 c -3.4923,-1.2647 0.5799,-0.0641 -7.5831,2.95362 -6.8712,2.54017 -0.6008,-0.7245 -5.9088,-0.1309 -1.8238,0.20396 -3.5707,1.96102 -5.3215,1.41119 -0.9485,-0.29785 0.2712,-1.9697 0.4068,-2.95455 -2.1395,0.72577 -8.1994,3.09305 -11.0946,3.15594 -0.8022,0.0174 -1.4819,-0.75312 -2.2843,-0.75912 -1.4875,-0.0111 -2.9241,0.83872 -4.406,0.70914 -0.6696,-0.0585 -0.9227,-1.23531 -1.5949,-1.23383 -1.8993,0.004 -3.7062,0.83302 -5.5593,1.24953 -1.4877,-0.14062 -3.0238,-0.0199 -4.463,-0.42187 -1.3253,-0.37016 -2.312,-1.87068 -3.688,-1.85469 -3.3485,0.0389 -6.5211,1.58654 -9.8428,2.012 -13.1893,1.68937 -13.9478,-4.61582 -28.0087,2.03076 -1.3915,-1.19056 -2.4011,-3.11451 -4.1744,-3.57167 -9.5097,-2.45156 -15.5294,4.59431 -24.6904,6.03647 -1.5778,0.24838 -2.4116,-2.31252 -3.9626,-2.69411 -1.4659,-0.36065 -13.9012,0.0936 -15.1486,0.12863 -4.3932,0.64589 -12.5556,2.55972 -17.3499,0.89763 -1.7478,-0.60591 -2.4137,-3.3413 -4.2494,-3.56907 -3.76075,-0.46664 -7.46474,1.44521 -11.24902,1.64602 -5.31729,0.28216 -9.63934,-1.02282 -14.71116,-2.16054 -3.62506,0.0416 -7.25011,0.0833 -10.87517,0.12489 -1.46661,-1.91869 -2.10783,-4.99506 -4.39981,-5.75608 -4.44296,-1.47522 -9.39555,0.224 -14.03963,-0.3665 -4.45348,-0.56626 -8.69467,-2.27262 -13.10978,-3.08555 -11.95644,-2.20149 -24.18414,-2.77489 -36.00717,-5.80613 -20.51683,-4.13739 -19.6779,-4.75794 -41.33446,-5.73372 -7.17839,-0.32344 -14.37695,0.13985 -21.55642,-0.15836 -5.37859,-0.2234 -10.72562,-0.93683 -16.08843,-1.40525 -3.28197,-0.72915 -6.48863,-2.00962 -9.84591,-2.18745 -3.11701,-0.1651 -6.19352,0.78255 -9.29028,1.17383 0,0 34.48053,-25.051568 34.48053,-25.051568 z""")

    def test_negative(self):
        """You don't need spaces before a minus-sign"""
        path1 = parse_path('M100,200c10-5,20-10,30-20')
        path2 = parse_path('M 100 200 c 10 -5 20 -10 30 -20')
        self.assertEqual(path1, path2)         
        
if __name__ == '__main__':
    unittest.main()
